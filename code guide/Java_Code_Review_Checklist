# Clean Code http://techbus.safaribooksonline.com/book/software-engineering-and-development/agile-development/9780136083238

        Item                                                  Category

Use Intent-Revealing Names                                  Meaningful Name
Pick one word per concept                                   Meaningful Name
Use Solution/Problem Domain Names                           Meaningful Name
Classes should be small                                     Classes
Function should be small                                    Functions
Do one thing                                                Functions
Don't Repeat Yourself(Avoid Duplication)                    Functions
Explain yourself in code                                    Comments
Make sure the code fomatting is applied                     Formatting
Use Exceptions rather than Return codes                     Exceptions
Don't return Null                                           Exceptions


# Security http://www.oracle.com/technetwork/java/seccodeguide-139067.html

        Item                                                    Category

Make class final if no inheritance                          Fundamentals
Avoid duplication of code                                   Fundamentals
Restrict privileges:
  Application to run with least privilege                   Fundamentals
  mode required for functioning
Minimize the accessibility of classes and members           Fundamentals
Document security related information                       Fundamentals
Avoid excessive logs for unusual behavior                   Denial of Service
Release resources (Streams, Connections, etc)               Denial of Service
Purge sensitive information from Exceptions                 Confidential Information
Don't log highly sensitive information                      Confidential Information
Consider purging highly sensitive from memory after use     Confidential Information
Avoid dynamic SQL, use prepared statement                   Injection Inclusion
Limit the accessibility of packages, classes,               Accessibility Extensibility
  interfaces, methods, and fields
Limit the extensibility of classes and methods              Accessibility Extensibility
  (by making it final)
Validate inputs                                             Input Validation
  (valid data, size, range, boundary conditions, etc)
Validate output from untrusted objects as inputs            Input Validation
Define wrappers around native methods                       Input Validation
  (not declare a native method public)
Avoid exposing constructors of sensitive classes            Object Construction
Avoid serialization for security-sensitive classes          Serialization Deserialization
Guard sensitive data during serialization                   Serialization Deserialization
Only use JNI when necessary                                 Access Contrl


# Performance http://techbus.safaribooksonline.com/book/programming/java/9780137150021

        Item                                                    Category
        
Avoid excessive synchronization                             Concurrency
Keep Synchronized Sections Small                            Concurrency
Beware the performance of string concatenation              General Programming
Avoid creating unnecessary objects                          Creating and Destroying Objects


# General http://techbus.safaribooksonline.com/book/programming/java/9780137150021

        Item                                                    Category

Use checked exceptions for recoverable conditions           Exceptions
  and runtime exceptions for programming erros
Favor the use of standard exceptions                        Exceptions
Don't ignore exceptions                                     Exceptions
Check parameters for validity                               Methods
Return empty arrays or collections, not nuls                Methods
Minimize the accessibility of classes and members           Classes and interfaces
In public classes, use accessor methods, not public fields  Classes and interfaces
Minimize the scope of local variable                        General Programming
Refer to objects by their interfaces                        General Programming
Adhere to generally accepted naming conventions             General Programming
Avoid finalizers                                            Creating and Destroying Objects
Always override hashCode when you override equals           General Programming
Always override toString                                    General Programming
Use enums instead of int constants                          Enums and Annotations
Use marker interfaces to define types                       Enums and Annotations
Synchronize access to shared mutable data                   Concurrency
Prefer executor to tasks and threads                        Concurrency
Document thread safety                                      Concurrency
Valid JUnit/JBehave test cases exist                        Testing


# Static Code Analysis

        Item                                                    Category

Check static code analyzer report                           Static Code Analysis
  for classes added/modified